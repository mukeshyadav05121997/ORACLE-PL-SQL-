% type:
% type is generics type,it is used to make the data independent
example: 
declare
c_id customer.customerid %type;
c_name customer.name %type;

==============================================================================================================
Cursor
~ Oracle creates a memory area known as Context area for processing sql statement which contacin all the information needed for execution
of program
~the cursor in the pointer to that context area,PL/SQL area through cursor ;
~Cursor hold the row and we can give it name also;
~set of row hold by cursor called active set

there are two type of cursor:
1.Implicit
  Implicit cursor is automatically created by oracle whenever dml statement is executed
  whenever the dml(insert,update,delete) are executed implicit cursor is executed with them
  implicit cursor is called sql cursor
  they have following attribute:
  1. %Found
    Return TRUE if dml command execute and affected one or more rows or
    a select into affected one or more rows otherwise return False
  2.%ISOPEN
    always return false because sql cursor automatically get closed  after executing
  3.%not found
   It is opposite to %found,It return true if dml command affect no rows or select statement return no row
   otherwise its return false
  4.ROW count
    return the number of rows affected by unsert,update,delete or return by select statement
  
2.Explicit
  we can crate cursor by giving reference to context area
  1.Declare
  2.open
  3.fetch data
  4.close
 ============================================================================================================================= 
  FETCHING DATA USING EXPLICIT CURSOR(ONE ROW FETCHING)
  
create or replace  procedure studen_1
(S_id in Students.Student_ID %type)
is

S_name Students.Students_Name %type;
S_stream Students.Student_Stream %type;

 cursor c is select Students_Name,Student_Stream   //DECLARATION OF CURSOR
 from  Students
 where Student_ID=S_id;

begin
open c;                                           //OPEN OF CURSOR
fetch c                                           //FETCHING DATA
 into S_name ,S_stream ;
 
commit;
dbms_output.put_line(S_id);
dbms_output.put_line(S_name);
dbms_output.put_line(S_stream);
close c;                                         CLOSE OF DATA
end studen_1;
===========================================================================================================================================================================
fetching more than one row
create or replace  procedure studen_1
(S_id in Students.Student_ID %type)
is

S_name Students.Students_Name %type;     // To minimize the code we use 
S_stream Students.Student_Stream %type;
 cursor c is select Students_Name,Student_Stream 
 from  Students
 where Student_ID=S_id;

begin
open c;
LOOP
fetch c
 into S_name ,S_stream ;
 
commit;
EXIT WHEN C%NOTFOUND;
dbms_output.put_line(S_id);
dbms_output.put_line(S_name);
dbms_output.put_line(S_stream);
END LOOP;
close c;
end studen_1;


==========================================================================================================================================================================
using Records in cursor


create or replace  procedure studen_1
(S_id in Students.Student_ID %type)
is


 cursor c is. select Students_Name,Student_Stream 
 from  Students
 where Student_ID=S_id;
c_rec c%rowtype;
begin
open c;
LOOP
fetch c
 into c_rec ;
 
commit;
EXIT WHEN C%NOTFOUND;
dbms_output.put_line(c_rec.S_id);
dbms_output.put_line(c_rec.S_name);
dbms_output.put_line(c_rec.S_stream);
END LOOP;
close c;
end studen_1;





